/*
 * libretroshare Android AAR library gradle builder
 *
 * Copyright (C) 2022  Gioacchino Mazzurco <gio@eigenlab.org>
 * Copyright (C) 2022  Asociaci√≥n Civil Altermundi <info@altermundi.net>
 *
 * SPDX-License-Identifier: CC0-1.0
 */

/*
 * Set minumum Android API level supported by this build passing
 * -PANDROID_MIN_API_LEVEL=16 (change 16 to what you need) on the gradle command
 * line.
 *
 * LIBRETROSHARE_SOURCE_VERSION Set source version ex:
 * -PLIBRETROSHARE_SOURCE_VERSION="$(git describe --always)"
 *
 * Optionally set JNI_NATIVE_LIBS_ARCHS to a space separated target CPU
 * architectures list named as seen in AAR native libraries directories passing
 * -PJNI_NATIVE_LIBS_ARCHS="arm64-v8a armeabi-v7a" defaults to all architectures
 * supported by current script at current Android minimum API
 *
 * Optionally set NATIVE_TOOLCHAINS_DIR for easier reuse of toolchains which
 * take a lot to build and doesn't change often
 * -PNATIVE_TOOLCHAINS_DIR="/native/toolchains/path"
 */

buildscript
{
	repositories
	{
		// The order in which you list these repositories matter.
		google()
		mavenCentral()
	}

	dependencies
	{
		classpath 'com.android.tools.build:gradle:7.1.+'
	}
}

allprojects
{
	repositories
	{
		// The order in which you list these repositories matter.
		google()
		mavenCentral()
	}
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

ext.buildLibretroshareNativeLib =
{
	pApiLevel, /* Android API level */
	pAbi, /* Arch name as seen in AAR native libraries directories */
	pNdkPath, /* Android NDK path */
	pReuseToolchain = true /* If true reuse previously built toochain */ ->

	/* Convert pAbi into corresponding prepare toolchain ANDROID_NDK_ARCH */
	def toolchainArch = "unsupported"
	def libcxxsharedTriple = "unsupported"
	switch(pAbi)
	{
	case "armeabi-v7a":
		toolchainArch = "arm";
		libcxxsharedTriple = "arm-linux-androideabi";
		break;
	case "arm64-v8a":
		toolchainArch = "arm64";
		libcxxsharedTriple = "aarch64-linux-android";
		break;
	default:
		throw new GradleException(
			"buildLibretroshareNativeLib unsupported pAbi: $pAbi" );
		break;
	}

	def toolchainsWorkdir = null
	if(project.hasProperty('NATIVE_TOOLCHAINS_DIR'))
	{
		toolchainsWorkdir = NATIVE_TOOLCHAINS_DIR
	}
	else
	{
		toolchainsWorkdir = "${buildDir}/native_toolchains/"
	}

	mkdir toolchainsWorkdir

	def currToolchainPath = "$toolchainsWorkdir/$pApiLevel-$toolchainArch/"

	// Todo: use proper way to resolve the script path
	def toolChainScriptPath = "${projectDir}/misc/Android/prepare-toolchain-clang.sh"

	if(!pReuseToolchain || !file(currToolchainPath).exists())
	{
		exec
		{
			workingDir toolchainsWorkdir
			environment "ANDROID_NDK_PATH", pNdkPath
			environment "NATIVE_LIBS_TOOLCHAIN_PATH", currToolchainPath
			environment "ANDROID_PLATFORM_VER", pApiLevel
			environment "ANDROID_NDK_ARCH", toolchainArch
			commandLine toolChainScriptPath /*, 'build_libretroshare'*/
		}
	}
	else
	{
		exec
		{
			workingDir toolchainsWorkdir
			environment "ANDROID_NDK_PATH", pNdkPath
			environment "NATIVE_LIBS_TOOLCHAIN_PATH", currToolchainPath
			environment "ANDROID_PLATFORM_VER", pApiLevel
			environment "ANDROID_NDK_ARCH", toolchainArch
			commandLine toolChainScriptPath, 'build_libretroshare'
		}
	}

	def nativeLibsDir = "${buildDir}/native_libs/"
	mkdir nativeLibsDir

	def currAbiLibDir = "${nativeLibsDir}/$pAbi/"
	mkdir currAbiLibDir
	copy
	{
		from "${currToolchainPath}/sysroot/usr/lib/libretroshare.so"
		into currAbiLibDir
	}
	
	copy
	{
		from "${currToolchainPath}/sysroot/usr/lib/${libcxxsharedTriple}/libc++_shared.so"
		into currAbiLibDir
	}
	
	copy
	{
		from "${currToolchainPath}/sysroot/usr/lib/${libcxxsharedTriple}/${pApiLevel}/liblog.so"
		into currAbiLibDir
	}
}

task prepareRetroshareNativeLibs
{
	doLast
	{
		def pAbis = null
		if(project.hasProperty('JNI_NATIVE_LIBS_ARCHS'))
		{
			pAbis = JNI_NATIVE_LIBS_ARCHS.split(' ') as List
		}
		else
		{
			if(ANDROID_MIN_API_LEVEL.toInteger() <= 16)
			{
				pAbis = ['armeabi-v7a']
			}
			else
			{
				pAbis = ['arm64-v8a', 'armeabi-v7a']
			}
		}

		def pNdkPath = android.getNdkDirectory().getAbsolutePath()

		pAbis.each
		{
			abi ->
			buildLibretroshareNativeLib(ANDROID_MIN_API_LEVEL, abi, pNdkPath)
		}
	}
}
build.dependsOn prepareRetroshareNativeLibs

ext.getArtifactBaseName =
{
	config ->
	return project.name + "-MinApiLevel" + ANDROID_MIN_API_LEVEL
}

android
{
	// see https://stackoverflow.com/questions/27301867/what-is-compilesdkversion
	compileSdkVersion 21

	ndkVersion "21.0.6113669"

	defaultConfig
	{
		minSdkVersion ANDROID_MIN_API_LEVEL
		targetSdkVersion 28
	
		/* Prevent proguard run at applications build time, to alter
		 * libretroshare Java classes that are used by libretroshare C++ code */
		consumerProguardFiles 'misc/Android/proguard-keep-libretroshare-java-classes.pro'
	}

	setProperty("archivesBaseName", getArtifactBaseName(defaultConfig))

	sourceSets
	{
		main
		{
			java.srcDirs = [ 'src/rs_android/' ]
			manifest.srcFile 'src/rs_android/AndroidManifest.xml'
			assets.srcDirs = [ "${buildDir}/libretroshare-build/android-assets/" ]
			jniLibs.srcDirs = [ "${buildDir}/native_libs/" ]
		}
	}

	lintOptions
	{
		 disable 'LongLogTag'
	}

	 publishing
	 {
		multipleVariants
		{
			allVariants()
		}
	}
}

afterEvaluate
{
	publishing
	{
		// see https://developer.android.com/reference/tools/gradle-api/7.1/com/android/build/api/dsl/LibraryPublishing
		publications
		{
			debug(MavenPublication)
			{
				groupId = 'org.retroshare.service'
				artifactId "${getArtifactBaseName()}-debug"
				version LIBRETROSHARE_SOURCE_VERSION
				artifact bundleReleaseAar
			}
			release(MavenPublication)
			{
				groupId = 'org.retroshare.service'
				artifactId "${getArtifactBaseName()}-release"
				version LIBRETROSHARE_SOURCE_VERSION
				artifact bundleReleaseAar
			}
		}
		repositories
		{
			maven
			{
				url =  uri("https://gitlab.com/api/v4/projects/${System.getenv('CI_PROJECT_ID')}/packages/maven")
				name = "Gitlab"
				credentials(HttpHeaderCredentials)
				{
					name = "Job-Token"
					value = System.getenv("CI_JOB_TOKEN")
				}
				authentication
				{
					header(HttpHeaderAuthentication)
				}
			}
		}
	}
}
